import pandas as pd
import numpy as np
import statsmodels.api as sm
from statsmodels.stats.diagnostic import het_goldfeldquandt
from statsmodels.stats.diagnostic import het_breuschpagan
from statsmodels.stats.stattools import jarque_bera
from statsmodels.stats.diagnostic import het_white
from statsmodels.stats.outliers_influence import variance_inflation_factor
import matplotlib.pyplot as plt

# Set display options to show all columns and rows
pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', None)

# Read the CSV file
data = pd.read_csv('turisti.csv', delimiter=';', encoding='latin1')

# Convert 'EU' to numeric (0 or 1)
data['EU'] = data['EU'].astype(int)

# Convert 'TURISTI' to numeric and handle missing values
data['TURISTI'] = pd.to_numeric(data['TURISTI'], errors='coerce')

# Drop rows with missing values in the 'TURISTI' column
data = data.dropna(subset=['TURISTI'])

# Check for NaN or infinite values
nan_inf_check = data.isin([np.inf, -np.inf, np.nan])
print("\nCheck for NaN or Infinite values:")
print(nan_inf_check.sum())

# Replace NaN or infinite values with a small constant
small_constant = 1e-5
data.replace([np.inf, -np.inf, np.nan], small_constant, inplace=True)

# Descriptive statistics after handling NaN or infinite values
print("\nDescriptive Statistics (After Handling NaN or Infinite Values):")
# Explicitly include all columns in the describe method
print(data.describe())

# Take the logarithm (base 10) of both the dependent and independent variables after adding a small constant
dependent_variable = 'TURISTI'
independent_variables = ['GDPPC', 'SPI', 'TERROR', 'PUTEVI', 'AERODROM', 'KULTURA', 'PRIRODA', 'TEMP', 'EU']

data[dependent_variable] = np.log10(data[dependent_variable] + small_constant)

for var in independent_variables:
    if var != 'EU':  # Exclude 'EU' from log transformation
        data[var] = np.log10(data[var] + small_constant)

# Check for infinite or NaN values in the dataset
if data.isin([np.inf, -np.inf, np.nan]).any().any():
    # Handle or drop rows with infinite or NaN values
    data = data.replace([np.inf, -np.inf], np.nan).dropna()

# Define dependent and independent variables
X = data[independent_variables]
X = sm.add_constant(X)
y = data[dependent_variable]

# Fit the OLS model
model = sm.OLS(y, X).fit()

# Print regression results
print("\nRegression Results:")
print(model.summary())

# RESET test
reset_test = het_goldfeldquandt(model.resid, model.model.exog)
print("\nRESET (Regression Specification Error Test) p-value:", reset_test[1])

# Breusch-Pagan test for homoskedasticity
bp_test = het_breuschpagan(model.resid, model.model.exog)
print("\nBreusch-Pagan test for Homoskedasticity p-value:", bp_test[1])

# Perform White test for heteroskedasticity
white_test = het_white(model.resid, model.model.exog)
print("White test for Heteroskedasticity p-value:", white_test[1])

# Jarque-Bera test for normality of residuals
jb_test = jarque_bera(model.resid)
print("\nJarque-Bera test for Normality of Residuals p-value:", jb_test[1])

# VIF test
vif_data = pd.DataFrame()
vif_data["Variable"] = X.columns
vif_data["VIF"] = [variance_inflation_factor(X.values, i) for i in range(X.shape[1])]
print("\nVariance Inflation Factor (VIF):")
print(vif_data)

# Plot Normality of Residuals (Q-Q plot)
fig, ax = plt.subplots(figsize=(10, 6))
sm.graphics.qqplot(model.resid, line='45', fit=True, ax=ax)
plt.title('Normality of Residuals (Q-Q Plot)')
plt.show()
